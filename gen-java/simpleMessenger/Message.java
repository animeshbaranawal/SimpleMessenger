/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package simpleMessenger;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
//@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-08-05")
public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable, Comparable<Message> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MSG_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("msgString", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("toID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FROM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fromID", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TO_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("toGroup", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageTupleSchemeFactory();

  public long timestamp; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String msgString; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String toID; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String fromID; // required
  public boolean toGroup; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    MSG_STRING((short)2, "msgString"),
    TO_ID((short)3, "toID"),
    FROM_ID((short)4, "fromID"),
    TO_GROUP((short)5, "toGroup");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // MSG_STRING
          return MSG_STRING;
        case 3: // TO_ID
          return TO_ID;
        case 4: // FROM_ID
          return FROM_ID;
        case 5: // TO_GROUP
          return TO_GROUP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private static final int __TOGROUP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MSG_STRING, new org.apache.thrift.meta_data.FieldMetaData("msgString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_ID, new org.apache.thrift.meta_data.FieldMetaData("toID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_ID, new org.apache.thrift.meta_data.FieldMetaData("fromID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_GROUP, new org.apache.thrift.meta_data.FieldMetaData("toGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    long timestamp,
    java.lang.String msgString,
    java.lang.String toID,
    java.lang.String fromID,
    boolean toGroup)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.msgString = msgString;
    this.toID = toID;
    this.fromID = fromID;
    this.toGroup = toGroup;
    setToGroupIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    if (other.isSetMsgString()) {
      this.msgString = other.msgString;
    }
    if (other.isSetToID()) {
      this.toID = other.toID;
    }
    if (other.isSetFromID()) {
      this.fromID = other.fromID;
    }
    this.toGroup = other.toGroup;
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.msgString = null;
    this.toID = null;
    this.fromID = null;
    setToGroupIsSet(false);
    this.toGroup = false;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public Message setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMsgString() {
    return this.msgString;
  }

  public Message setMsgString(@org.apache.thrift.annotation.Nullable java.lang.String msgString) {
    this.msgString = msgString;
    return this;
  }

  public void unsetMsgString() {
    this.msgString = null;
  }

  /** Returns true if field msgString is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgString() {
    return this.msgString != null;
  }

  public void setMsgStringIsSet(boolean value) {
    if (!value) {
      this.msgString = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getToID() {
    return this.toID;
  }

  public Message setToID(@org.apache.thrift.annotation.Nullable java.lang.String toID) {
    this.toID = toID;
    return this;
  }

  public void unsetToID() {
    this.toID = null;
  }

  /** Returns true if field toID is set (has been assigned a value) and false otherwise */
  public boolean isSetToID() {
    return this.toID != null;
  }

  public void setToIDIsSet(boolean value) {
    if (!value) {
      this.toID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFromID() {
    return this.fromID;
  }

  public Message setFromID(@org.apache.thrift.annotation.Nullable java.lang.String fromID) {
    this.fromID = fromID;
    return this;
  }

  public void unsetFromID() {
    this.fromID = null;
  }

  /** Returns true if field fromID is set (has been assigned a value) and false otherwise */
  public boolean isSetFromID() {
    return this.fromID != null;
  }

  public void setFromIDIsSet(boolean value) {
    if (!value) {
      this.fromID = null;
    }
  }

  public boolean isToGroup() {
    return this.toGroup;
  }

  public Message setToGroup(boolean toGroup) {
    this.toGroup = toGroup;
    setToGroupIsSet(true);
    return this;
  }

  public void unsetToGroup() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOGROUP_ISSET_ID);
  }

  /** Returns true if field toGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetToGroup() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOGROUP_ISSET_ID);
  }

  public void setToGroupIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOGROUP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((java.lang.Long)value);
      }
      break;

    case MSG_STRING:
      if (value == null) {
        unsetMsgString();
      } else {
        setMsgString((java.lang.String)value);
      }
      break;

    case TO_ID:
      if (value == null) {
        unsetToID();
      } else {
        setToID((java.lang.String)value);
      }
      break;

    case FROM_ID:
      if (value == null) {
        unsetFromID();
      } else {
        setFromID((java.lang.String)value);
      }
      break;

    case TO_GROUP:
      if (value == null) {
        unsetToGroup();
      } else {
        setToGroup((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return getTimestamp();

    case MSG_STRING:
      return getMsgString();

    case TO_ID:
      return getToID();

    case FROM_ID:
      return getFromID();

    case TO_GROUP:
      return isToGroup();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case MSG_STRING:
      return isSetMsgString();
    case TO_ID:
      return isSetToID();
    case FROM_ID:
      return isSetFromID();
    case TO_GROUP:
      return isSetToGroup();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_msgString = true && this.isSetMsgString();
    boolean that_present_msgString = true && that.isSetMsgString();
    if (this_present_msgString || that_present_msgString) {
      if (!(this_present_msgString && that_present_msgString))
        return false;
      if (!this.msgString.equals(that.msgString))
        return false;
    }

    boolean this_present_toID = true && this.isSetToID();
    boolean that_present_toID = true && that.isSetToID();
    if (this_present_toID || that_present_toID) {
      if (!(this_present_toID && that_present_toID))
        return false;
      if (!this.toID.equals(that.toID))
        return false;
    }

    boolean this_present_fromID = true && this.isSetFromID();
    boolean that_present_fromID = true && that.isSetFromID();
    if (this_present_fromID || that_present_fromID) {
      if (!(this_present_fromID && that_present_fromID))
        return false;
      if (!this.fromID.equals(that.fromID))
        return false;
    }

    boolean this_present_toGroup = true;
    boolean that_present_toGroup = true;
    if (this_present_toGroup || that_present_toGroup) {
      if (!(this_present_toGroup && that_present_toGroup))
        return false;
      if (this.toGroup != that.toGroup)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(timestamp);

    hashCode = hashCode * 8191 + ((isSetMsgString()) ? 131071 : 524287);
    if (isSetMsgString())
      hashCode = hashCode * 8191 + msgString.hashCode();

    hashCode = hashCode * 8191 + ((isSetToID()) ? 131071 : 524287);
    if (isSetToID())
      hashCode = hashCode * 8191 + toID.hashCode();

    hashCode = hashCode * 8191 + ((isSetFromID()) ? 131071 : 524287);
    if (isSetFromID())
      hashCode = hashCode * 8191 + fromID.hashCode();

    hashCode = hashCode * 8191 + ((toGroup) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMsgString()).compareTo(other.isSetMsgString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgString, other.msgString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToID()).compareTo(other.isSetToID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toID, other.toID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFromID()).compareTo(other.isSetFromID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromID, other.fromID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToGroup()).compareTo(other.isSetToGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toGroup, other.toGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Message(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgString:");
    if (this.msgString == null) {
      sb.append("null");
    } else {
      sb.append(this.msgString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toID:");
    if (this.toID == null) {
      sb.append("null");
    } else {
      sb.append(this.toID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromID:");
    if (this.fromID == null) {
      sb.append("null");
    } else {
      sb.append(this.fromID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toGroup:");
    sb.append(this.toGroup);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSG_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msgString = iprot.readString();
              struct.setMsgStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toID = iprot.readString();
              struct.setToIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FROM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromID = iprot.readString();
              struct.setFromIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TO_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.toGroup = iprot.readBool();
              struct.setToGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.msgString != null) {
        oprot.writeFieldBegin(MSG_STRING_FIELD_DESC);
        oprot.writeString(struct.msgString);
        oprot.writeFieldEnd();
      }
      if (struct.toID != null) {
        oprot.writeFieldBegin(TO_ID_FIELD_DESC);
        oprot.writeString(struct.toID);
        oprot.writeFieldEnd();
      }
      if (struct.fromID != null) {
        oprot.writeFieldBegin(FROM_ID_FIELD_DESC);
        oprot.writeString(struct.fromID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TO_GROUP_FIELD_DESC);
      oprot.writeBool(struct.toGroup);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageTupleScheme getScheme() {
      return new MessageTupleScheme();
    }
  }

  private static class MessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<Message> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetMsgString()) {
        optionals.set(1);
      }
      if (struct.isSetToID()) {
        optionals.set(2);
      }
      if (struct.isSetFromID()) {
        optionals.set(3);
      }
      if (struct.isSetToGroup()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetMsgString()) {
        oprot.writeString(struct.msgString);
      }
      if (struct.isSetToID()) {
        oprot.writeString(struct.toID);
      }
      if (struct.isSetFromID()) {
        oprot.writeString(struct.fromID);
      }
      if (struct.isSetToGroup()) {
        oprot.writeBool(struct.toGroup);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.msgString = iprot.readString();
        struct.setMsgStringIsSet(true);
      }
      if (incoming.get(2)) {
        struct.toID = iprot.readString();
        struct.setToIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fromID = iprot.readString();
        struct.setFromIDIsSet(true);
      }
      if (incoming.get(4)) {
        struct.toGroup = iprot.readBool();
        struct.setToGroupIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

